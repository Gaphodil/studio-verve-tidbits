<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false; //Sets if the player can move or not

inputHandler = objWorld.manualInput;

step_scripts = array_create(7);
step_scripts[0] = player_handle_move;
step_scripts[1] = player_handle_actions;
step_scripts[2] = player_handle_change_aligns;
step_scripts[3] = player_handle_death_sfx;
step_scripts[4] = player_handle_vines;
step_scripts[5] = player_handle_slopes;
step_scripts[6] = player_handle_blocks;

end_step_scripts = array_create(4);
end_step_scripts[0] = player_resolve_collisions;
end_step_scripts[1] = player_resolve_killers;
end_step_scripts[2] = player_resolve_screen_border;
end_step_scripts[3] = player_resolve_animations;

jumpSpeed = 8.5 * global.grav; //Set how fast the player jumps
djumpSpeed = 7 * global.grav; //Sets how fast the player double jumps
gravity = 0.4 * global.grav; //Player gravity

maxAirJumps = 1; //How many double jumps the player gets - 0 = single jump only, 1 = double jump, 2 = triple jump, etc.
airJumps = maxAirJumps; //Allow the player to double jump as soon as they spawn
runSpeed = 3;   //Max horizontal speed
maxVspeed = 9;  //Max vertical speed
image_speed = 0.2;
onPlatform = false;
deathSoundCooldown = 0; //Used for god mode death indicator sound.

xScale = 1;

player_set_mask();

if (global.difficulty == 0 &amp;&amp; global.gameStarted)
    { instance_create(x,y,objBow); }
    
if (global.autosave) //Save the game if currently set to autosave
{
    savedata_save(true);
    global.autosave = false;
}

xsafe = x;
ysafe = y;

do_dynamic_collision(true);

notOnBlock = false;
onVineR = false;
onVineL = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the bow
with (objBow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0;
        i &lt; array_length_1d(end_step_scripts);
        i++)
    script_execute(end_step_scripts[i]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0;
        i &lt; array_length_1d(step_scripts);
        i++)
    script_execute(step_scripts[i]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Land on platforms, get snapped
//Being carried upwards is handled in objPlatform

if (global.grav == 1)    //Normal
{
    var landedOnPlatform = bbox_bottom - vspeed - 1 &lt;= other.bbox_top - min(other.vspeed, 0);
    var jumpedOut = bbox_bottom + vspeed &lt;= other.bbox_top + other.vspeed;
    
    if (landedOnPlatform || (jumpedOut &amp;&amp; other.snap))
    {
        var yy = other.bbox_top - (bbox_bottom - y) - 1;
        if (!global.platformsPhase)
        {
            move_contact_solid(90, y - yy); //Move against solid to not get snapped into a wall
        }
        else
        {
            y = yy;
            ysafe = y;
        }
        vspeed = max(other.vspeed, 0);
        
        onPlatform = true;
        airJumps = maxAirJumps;
    }
}
else    //Flipped
{
    var landedOnPlatform = bbox_top - vspeed + 1 &gt;= other.bbox_bottom - max(other.vspeed, 0);
    var jumpedOut = bbox_top + vspeed &gt;= other.bbox_bottom + other.vspeed;
    
    if (landedOnPlatform || (jumpedOut &amp;&amp; other.snap))
    {
        var yy = other.bbox_bottom + (y - bbox_top) + 1;
        if (!global.platformsPhase)
        {
            move_contact_solid(270, yy - y);
        }
        else
        {
            y = yy;
            ysafe = y;
        }
        vspeed = min(other.vspeed, 0);
        
        onPlatform = true;
        airJumps = maxAirJumps;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Autosave

if (global.autosave) //Save the game if currently set to autosave
{
    savedata_save(true);
    global.autosave = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the player


// Round the coordinates to avoid .5 align jittering
var drawX = floor(x + 0.5);
var drawY = floor(y + 0.5);

// Need to draw the player a pixel off in the y-axis when flipped for some reason
if (global.grav == -1) {
    drawY += 1;
}


// Setup debug drawing
var drawAlpha = image_alpha;
var drawColor = image_blend;

if global.debugVisuals {
    if global.debugNoDeath {
        drawAlpha *= 0.7;
    }
    if global.debugInfJump {
        drawColor = color_multiply(drawColor, c_blue);
    }
}

draw_sprite_ext(sprite_index, image_index, drawX, drawY, image_xscale * xScale, image_yscale * global.grav, image_angle, drawColor, drawAlpha);

// Draw the player's hitbox
if (global.debugShowHitbox) {
    draw_sprite_ext(mask_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha * 0.8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
